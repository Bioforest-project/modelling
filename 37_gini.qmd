```{r set}
#| message: false
#| include: false
library(tidyverse)
library(knitr)
library(cmdstanr)
library(bayesplot)
library(loo)
library(patchwork)
list.files("r", full.names = TRUE, pattern = ".R") %>%
  lapply(source)
```

# Gini {.unnumbered}

Modelling of Gini index trajectories.

## Data

```{r data}
#| message: false
#| warning: false
var <- "gini"
if (!exists(file.path("chains", var))) {
  dir.create(file.path("chains", var))
}
lab <- "Gini index"
data_rec <- read_tsv("data/derived_data/data_rec.tsv") %>%
  filter(variable == var)
data_pre <- read_tsv("data/derived_data/data_pre.tsv") %>%
  filter(variable == var)
data_old <- read_tsv("data/derived_data/data_old.tsv") %>%
  filter(variable == var)
mdata <- prep_mdata(
  data_rec, data_pre, data_old,
  dist_bounds = c(0.1, 1.5),
  delta_bounds = c(0, 2),
  mu_thetaInf_bounds = c(0, 2),
  thetaInf_s_bounds = c(0, 2)
)
```

```{r fig}
#| fig-cap: "Modelled trajectories."
bind_rows(data_rec, data_pre, data_old) %>% 
  ggplot(aes(rel_year, y, group = paste(site, plot), col = treatment)) +
  geom_line() +
  facet_wrap(~site) +
  theme_bw() +
  xlab("") +
  ylab(lab) +
  theme(legend.position = "bottom") +
  scale_color_discrete("")
```

## LTP

```{r ltp_fit}
#| eval: false
ltp <- cmdstan_model("models/ltp.stan")
path <- file.path("chains", var, "ltp")
unlink(path, recursive = TRUE)
dir.create(path)
fit_ltp <- ltp$sample(
  data = mdata,
  chains = 4,
  parallel_chains = 4,
  save_warmup = FALSE,
  output_dir = path
)
```

```{r load_ltp}
#| message: false
#| warning: false
path <- file.path("chains", var, "ltp")
fit_ltp <- as_cmdstan_fit(list.files(path, full.names = TRUE))
fit_ltp
```

```{r pvo_ltp}
#| message: false
#| warning: false
#| fig-cap: "Predicted versus observed."
pvo_fig(data_rec, data_pre, fit_ltp)
```

```{r preds_ltp}
#| message: false
#| warning: false
#| fig-cap: "Predicted trajectories."
proj_fig(data_rec, data_pre, data_old, fit_ltp, lab)
```

## STP

```{r stp_fit}
#| eval: false
stp <- cmdstan_model("models/stp.stan")
path <- file.path("chains", var, "stp")
unlink(path, recursive = TRUE)
dir.create(path)
fit_stp <- stp$sample(
  data = mdata,
  chains = 4,
  parallel_chains = 4,
  save_warmup = FALSE,
  output_dir = path
)
```

```{r load_stp}
#| message: false
#| warning: false
path <- file.path("chains", var, "stp")
fit_stp <- as_cmdstan_fit(list.files(path, full.names = TRUE))
fit_stp
```

```{r pvo_stp}
#| message: false
#| warning: false
#| fig-cap: "Predicted versus observed."
pvo_fig(data_rec, data_pre, fit_stp)
```

```{r preds_stp}
#| message: false
#| warning: false
#| fig-cap: "Predicted trajectories."
proj_fig(data_rec, data_pre, data_old, fit_stp, lab)
```

## Comparison

```{r lambda_comp}
#| message: false
#| warning: false
#| fig-cap: "lambda comparison across models."
comp_lambda_fig(data_rec, fit_ltp, fit_stp)
```
