```{r set}
#| message: false
#| include: false
library(tidyverse)
library(knitr)
library(cmdstanr)
list.files("r", full.names = TRUE, pattern = ".R") %>%
  lapply(source)
```

# Trajectories

This section develop trajectories per attributes. Boundaries of each parameter are listed below with the figure summarising the meaning of each parameter on the trajectory.

```{r stp_proj}
#| warning: false
#| message: false
#| fig-cap: "STP trajectory with parameters."
ltp <- function(time, dist, thetainf, lambda) {
  theta0 <- thetainf * dist
  ltp <- 1 - exp(-lambda * time)
  return(theta0 + (thetainf - theta0) * (ltp))
}
stp <- function(time, dist, thetainf, lambda, tau, delta) {
  theta0 <- thetainf * dist
  ltp <- 1 - exp(-lambda * time)
  stp <- delta * (time / tau * exp(1 - time / tau))^2
  return(theta0 + (thetainf - theta0) * (ltp + stp))
}
data.frame(time = seq(0.1, 50, length.out = 100)) %>%
  mutate(y_stp = stp(time,
    dist = 0.5, thetainf = 20, lambda = 0.05,
    tau = 5, delta = 1
  )) %>%
  mutate(y_ltp = ltp(time, dist = 0.5, thetainf = 20, lambda = 0.05)) %>%
  bind_rows(data.frame(time = 0, y_stp = 20, y_ltp = 20)) %>%
  ggplot(aes(time)) +
  geom_line(aes(y = y_ltp), col = "grey") +
  geom_line(aes(y = y_stp)) +
  theme_bw() +
  annotate("text",
    x = 52, y = 19.5, label = "theta[Inf]",
    col = "#9ea1d4", parse = TRUE, size = 5
  ) +
  annotate("text",
    x = 20, y = 15, label = "lambda",
    col = "#a8d2d1", parse = TRUE, size = 5
  ) +
  annotate("text",
    x = -4, y = 15, label = "dist",
    col = "#fc8a8a", parse = TRUE, size = 5
  ) +
  theme(axis.title = element_blank()) +
  geom_segment(aes(x = -2, y = 10, xend = -2, yend = 20),
    arrow = arrow(length = unit(0.2, "cm")), col = "#fc8a8a"
  ) +
  geom_segment(aes(x = -2, y = 20, xend = -2, yend = 10),
    arrow = arrow(length = unit(0.2, "cm")), col = "#fc8a8a"
  ) +
  annotate("text",
    x = 6, y = 11.3, label = "tau",
    col = "#f2e5a9", parse = TRUE, size = 5
  ) +
  annotate("text",
    x = 5, y = 17.5, label = "delta",
    col = "#a7d6ac", parse = TRUE, size = 5
  ) +
  geom_segment(aes(x = 6, y = 13, xend = 6, yend = 22),
    arrow = arrow(length = unit(0.2, "cm")), col = "#a7d6ac"
  ) +
  geom_segment(aes(x = 6, y = 22, xend = 6, yend = 13),
    arrow = arrow(length = unit(0.2, "cm")), col = "#a7d6ac"
  ) +
  geom_segment(aes(x = 6, y = 11, xend = 6, yend = 10),
    arrow = arrow(length = unit(0.2, "cm")), col = "#f2e5a9"
  ) +
  theme(axis.title = element_blank())
```

```{r data}
#| eval: false
bounds <- read_sheet("https://docs.google.com/spreadsheets/d/1rZZ_dKebVp1RnxI0ZawaSQws72FhubuPZ8O27DzJtFE/edit?usp=sharing") # nolint
write_tsv(bounds, "data/derived_data/bounds.tsv")
```

```{r bounds}
#| warning: false
#| message: false
read_tsv("data/derived_data/bounds.tsv") %>%
  mutate(
    mu_thetaInf = paste0("[", mu_thetaInf_min, " ,", mu_thetaInf_max, "]"),
    thetaInf = paste0("[", thetaInf_min, " ,", thetaInf_max, "]"),
    lambda = paste0("[", lambda_min, " ,", lambda_max, "]"),
    dist = paste0("[", dist_min, " ,", dist_max, "]"),
    delta = paste0("[", delta_min, " ,", delta_max, "]"),
    tau = paste0("[", tau_min, " ,", tau_max, "]")
         ) %>% 
  select(attribute, mu_thetaInf, thetaInf, lambda, dist, delta, tau) %>% 
  kable(caption = "Parameters boundaries per attribute.")
```

```{r fit_all}
#| eval: false
ltp <- cmdstan_model("models/ltp.stan")
stp <- cmdstan_model("models/stp.stan")
vars <- c(
  "nstem", "agb", "WD_cwm_ba", "FDiv", "diversity_q1_gen", "gini",
  "ba", "FEve", "SLA_cwm_ba", "N_cwm_ba", "hmax_cwm_ba"
)
for (var in vars) {
  sample_model(var, "ltp")
}
for (var in vars) {
  sample_model(var, "stp")
}
```
