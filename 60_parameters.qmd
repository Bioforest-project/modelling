```{r set}
#| message: false
#| include: false
library(tidyverse)
library(knitr)
list.files("r", full.names = TRUE, pattern = ".R") %>%
  lapply(source)
```

# Parameters

This section explore parameters all raw and derived parameters for each variable attribute and with co-variables.

```{r raw_params}
#| eval: false
library(cmdstanr)
tmp_path <- file.path("outputs", "pars_tmp")
dir.create(tmp_path)
index_p <- read_tsv("data/derived_data/data_rec.tsv") %>%
  select(site, plot, sitenum, plotnum) %>%
  unique()
index_s <- index_p %>%
  mutate(plot = NA, plotnum = NA) %>%
  unique()
vars <- c(
  "ba", "agb", "nstem", "gini",
  "diversity_q1_gen", "FDiv",
  "WD_cwm_ba", "SLA_cwm_ba"
)
for (var in vars) {
  path <- file.path("chains", paste0("rec_", var))
  fit <- as_cmdstan_fit(list.files(path, full.names = TRUE))
  pars_a <- fit$summary(c(
    "lp__",
    "mu_phi", "mu_phipct",
    "mu_delta", "mu_deltapct",
    "mu_tau0", "mu_tau",
    "mu_lambda", "mu_t90"
  )) %>%
    rename(parameter = variable) %>%
    mutate(
      level = "inter", site = NA, plot = NA,
      sitenum = NA, plotnum_rec = NA
    ) %>%
    select(
      parameter, level, site, plot, sitenum, plotnum_rec,
      mean, median, sd, mad, q5, q95,
      rhat, ess_bulk, ess_tail
    )
  pars_s <- fit$summary(c("tau_s", "tau0_s", "theta_s")) %>%
    separate(variable, c("parameter", "s", "sitenum"), convert = TRUE) %>%
    select(-s) %>%
    left_join(index_s) %>%
    mutate(level = "site") %>%
    select(
      parameter, level, site, plot, sitenum, plotnum,
      mean, median, sd, mad, q5, q95,
      rhat, ess_bulk, ess_tail
    )
  pars_p <- fit$summary(c(
    "phi_p", "phipct_p",
    "delta_p", "deltapct_p",
    "lambda_p", "y15_p", "t90_p"
  )) %>%
    separate(variable, c("parameter", "p", "plotnum"), convert = TRUE) %>%
    select(-p) %>%
    left_join(index_p) %>%
    mutate(level = "plot") %>%
    select(
      parameter, level, site, plot, sitenum, plotnum,
      mean, median, sd, mad, q5, q95,
      rhat, ess_bulk, ess_tail
    )
  bind_rows(pars_a, pars_s, pars_p) %>%
    mutate(attribute = var, .before = parameter) %>%
    write_tsv(file.path(tmp_path, paste0(var, "_pars.tsv")))
}
read_tsv(list.files(tmp_path, pattern = "pars", full.names = TRUE)) %>%
  write_tsv("outputs/raw_parameters.tsv")
unlink(tmp_path, recursive = TRUE)
```

```{r all_params}
#| eval: false
antimary_sites <- c(
  "Antimary APU2", "Antimary APU3"
)
pad_sites <- c(
  "Pad Limo 2 Barracos", "Pad Limo Chico Bocao", "Pad Limo Cumaru",
  "Pad Limo Jatoba", "Pad Limo Pocao", "Pad Limo STCP"
)
raw_pars <- read_tsv("outputs/raw_parameters.tsv") %>%
  mutate(type = "structure") %>%
  mutate(type = ifelse(attribute %in% c("diversity_q1_gen", "FDiv"),
    "diversity", type
  )) %>%
  mutate(type = ifelse(attribute %in% c(
    "SLA_cwm_ba", "WD_cwm_ba"
  ), "functional", type)) %>%
  mutate(par_parsed = recode(parameter,
    "lp__" = "likelihood",
    "mu_phi" = "mu[~phi]",
    "mu_phipct" = "mu[~phi]",
    "mu_delta" = "mu[~delta]",
    "mu_deltapct" = "mu[~delta]",
    "mu_tau" = "mu[~tau]",
    "mu_lambda" = "mu[~lambda]",
    "mu_t90" = "mu[~t90]",
    "phipct" = "phi",
    "deltapct" = "delta",
    "y15" = "y[15]",
    "t90" = "t[90]"
  )) %>%
  mutate(attr_long = recode(attribute,
    "ba" = "Str - BA",
    "agb" = "Str - AGB",
    "nstem" = "Str - Stem",
    "gini" = "Str - Gini",
    "diversity_q1_gen" = "Div - Genus q=1",
    "FDiv" = "Div - FDiv",
    "WD_cwm_ba" = "Func - WD",
    "SLA_cwm_ba" = "Func - SLA",
    "N_cwm_ba" = "Func - N"
  ))
biotic <- read_tsv("data/derived_data/data.tsv") %>%
  filter(treatment != "logged" | rel_year <= 0) %>%
  filter(variable %in% c(
    "gini", "SLA_cwm_ba", "WD_cwm_ba",
    "diversity_q1_gen", "FDiv"
  )) %>%
  group_by(site, variable) %>%
  summarise(value = mean(value)) %>%
  mutate(variable = paste0(variable, "_s")) %>%
  pivot_wider(names_from = variable, values_from = value)
region <- read_tsv("data/raw_data/metadata.tsv") %>%
  rename(site_raw = site) %>%
  left_join(read_tsv("data/raw_data/sites.tsv")) %>%
  select(-site_raw) %>%
  mutate(site = ifelse(site %in% pad_sites, "Pad Limo", site)) %>%
  mutate(site = ifelse(site %in% antimary_sites, "Antimary", site)) %>%
  mutate(region = ifelse(longitude < -27, "America", "Africa")) %>%
  mutate(region = ifelse(longitude > 54, "Asia", region)) %>%
  select(site, region) %>%
  unique()
env <- read_tsv("data/raw_data/environment.tsv") %>%
  rename(site_raw = site) %>%
  left_join(read_tsv("data/raw_data/sites.tsv")) %>%
  select(-site_raw) %>%
  mutate(plot = ifelse(site %in% c(pad_sites, antimary_sites),
    paste(site, plot),
    plot
  )) %>%
  mutate(site = ifelse(site %in% pad_sites, "Pad Limo", site)) %>%
  mutate(site = ifelse(site %in% antimary_sites, "Antimary", site))
pars <- raw_pars %>%
  left_join(region) %>%
  left_join(env) %>%
  left_join(biotic)
pars %>%
  select(site, region) %>%
  unique() %>%
  filter(!is.na(site)) %>%
  filter(is.na(region))
pars %>%
  select(site, plot, et) %>%
  filter(!is.na(site), !is.na(plot)) %>%
  filter(is.na(et)) %>%
  select(site) %>%
  unique()
pars %>%
  select(site, FDiv_s) %>%
  filter(!is.na(site)) %>%
  filter(is.na(FDiv_s)) %>%
  select(site) %>%
  unique()
pars %>%
  write_tsv("outputs/parameters.tsv")
```

The available data are:

-   **Attributes**: forest attributes for which post logging trajectories have been modelled
    -   **structure**: biomass **agb**, basal area **ba**, number of stems **nstem**, Gini index **gini**
    -   **diversity**: genus diversity **diversity_q1_gen**, functional diversity **FDiv**
    -   **functional**: specific leaf area **SLA_cwm_ba**, wood density **WD_cwm_ba**
-   **Parameters**: model parameters for each attribute at **inter-site**, **site** & **plot** levels
    -   **phi**: disturbance index $\phi$, with derived parameter expressed in percentage of loss
    -   **tau**: bump timing $\tau$ years
    -   **delta**: bump intensity $\delta$, with derived parameter expressed in percentage
    -   **lambda**: recovery rate $\lambda$
    -   **theta**: asymptotic value $\theta$.
    -   **t90**: 90% recovery time $t_{90}$, derived from $\lambda$ with $t_{90}=\frac{log(10)}{\lambda}$years
    -   **y15**: 15-year bump $y_{15} = \frac{\hat{y_{t=15}}}{\theta}$
-   **Parameter metrics**
    -   metrics on posterior distribution: mean **mean**, median **median**, standard deviation **sd**, median absolute deviation **mad**, 5th quantile **q5**, 95th quantile **q95**
    -   metrics on quality of fit for diagnostic: Rhat convergence diagnostic **rhat**, bulk effective sample size **ess_bulk**, tail effective sample size **ess_tail**
-   **Variables**: associated variables at site or plot level (see <https://bioforest-project.github.io/environment/>)
    -   **continent**
    -   climate: actual evapotranspiration **ET**, climate water deficit **CWD**, Palmer drought sensitivity index **PDSI**, potential evapotranspiration **PET**, precipitaiton **Pr**, maximum temperature **Tmax**, minimum temperature **Tmin**, vapour pressure deficit **VPD**
    -   soil: proportion of clay **clay**, proportion of sand **sand**, proportion of silt **silt**, bulk density **BD**, cation exchange capacity **CEC**, coarse fragments **CF**, nitrogen **N**, **pH**, soil organic content **SOC**, organic carbon density **OCD**
    -   landscape: mean landscape deforested percentage **deforested**
    -   biotic: mean site pre-logging and control gini index **gini_s**, specific leaf area **SLA_cwm_ba_s**, wood density **WD_cwm_ba_s**, and genus diversity **diversity_q1_gen_s**

## Likelihood convergence

```{r lp_rhat}
#| message: false
#| fig-cap: "Likelihood convergence per forest attribute."
read_tsv("outputs/parameters.tsv") %>%
  filter(parameter == "lp__") %>%
  ggplot(aes(forcats::fct_reorder(attribute, desc(rhat)),
    rhat,
    fill = rhat
  )) +
  geom_col() +
  coord_flip() +
  theme_bw() +
  scale_fill_viridis_c(expression(hat(R)), trans = "log") +
  theme(axis.title = element_blank())
```

## Inter-site

```{r inter}
#| message: false
#| warning: false
#| fig-cap: "Global parameters across sites."
read_tsv("outputs/parameters.tsv") %>%
  filter(
    level == "inter",
    parameter != "lp__",
  ) %>%
  filter(!(parameter %in% c(
    "mu_deltapct", "mu_phipct",
    "mu_t90", "mu_tau0"
  ))) %>%
  ggplot(aes(x = attr_long, col = type)) +
  geom_point(aes(y = median)) +
  geom_segment(aes(y = median - sd, yend = median + sd)) +
  geom_segment(aes(y = q5, yend = q95), size = .1) +
  facet_wrap(~par_parsed, scales = "free", labeller = label_parsed) +
  coord_flip() +
  theme_bw() +
  xlab("") +
  ylab("") +
  ylim(0, NA)
```

## Site

### Asymptotic value $\theta$

```{r thetaInf}
#| message: false
#| warning: false
#| fig-cap: "theta across sites."
#| fig-height: 10
read_tsv("outputs/parameters.tsv") %>%
  filter(parameter == "theta") %>%
  unique() %>%
  ggplot(aes(site, color = region)) +
  geom_point(aes(y = median)) +
  geom_segment(aes(y = median - sd, yend = median + sd)) +
  geom_segment(aes(y = q5, yend = q95), size = .1) +
  facet_wrap(~attr_long, scales = "free_x") +
  theme_bw() +
  coord_flip() +
  ylab(expression(theta)) +
  xlab("")
```

### Bump time $\tau$

```{r tau}
#| message: false
#| warning: false
#| fig-cap: "tau across sites"
#| fig-height: 10
read_tsv("outputs/parameters.tsv") %>%
  filter(parameter == "tau") %>%
  unique() %>%
  mutate_at(c("median", "sd", "q5", "q95"), ~ . + 3) %>%
  ggplot(aes(site, color = region)) +
  geom_point(aes(y = median)) +
  geom_segment(aes(y = median - sd, yend = median + sd)) +
  geom_segment(aes(y = q5, yend = q95), size = .1) +
  facet_wrap(~attr_long) +
  theme_bw() +
  coord_flip() +
  ylab(expression(tau)) +
  xlab("")
```

## Plot

### Disturbance index $\phi$

```{r phi}
#| message: false
#| warning: false
#| fig-cap: "phi across sites & plots for basal area."
read_tsv("outputs/parameters.tsv") %>%
  filter(parameter == "phipct", attribute == "ba") %>%
  unique() %>%
  ggplot(aes(plot)) +
  geom_point(aes(y = median)) +
  geom_segment(aes(y = median - sd, yend = median + sd)) +
  geom_segment(aes(y = q5, yend = q95), size = .1) +
  facet_wrap(~site, scales = "free_y") +
  theme_bw() +
  coord_flip() +
  ylab(expression(phi[BA] ~ "[ % lost ]")) +
  xlab("Plot") +
  theme(
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank(),
    panel.spacing = unit(0, "lines")
  )
```

### Recovery rate $\lambda$

```{r lambda}
#| message: false
#| warning: false
#| fig-cap: "lambda across sites & plots for basal area."
read_tsv("outputs/parameters.tsv") %>%
  filter(parameter == "lambda", attribute == "ba") %>%
  ggplot(aes(plot)) +
  geom_point(aes(y = median)) +
  geom_segment(aes(y = median - sd, yend = median + sd)) +
  geom_segment(aes(y = q5, yend = q95), size = .1) +
  facet_wrap(~site, scales = "free") +
  theme_bw() +
  coord_flip() +
  ylab(expression(lambda[BA])) +
  xlab("Plot") +
  scale_y_log10() +
  theme(
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank(),
    panel.spacing = unit(0, "lines")
  )
```

### Recovery time $t_{90}$

```{r t90}
#| message: false
#| warning: false
#| fig-cap: "t90 across sites & plots for basal area."
read_tsv("outputs/parameters.tsv") %>%
  filter(parameter == "t90", attribute == "ba") %>%
  unique() %>%
  ggplot(aes(plot)) +
  geom_point(aes(y = median)) +
  geom_segment(aes(y = median - sd, yend = median + sd)) +
  geom_segment(aes(y = q5, yend = q95), size = .1) +
  facet_wrap(~site, scales = "free") +
  theme_bw() +
  coord_flip() +
  ylab(expression(t[90][BA] ~ "[ yr ]")) +
  xlab("Plot") +
  scale_y_log10() +
  theme(
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank(),
    panel.spacing = unit(0, "lines")
  )
```

### Bump intensity $\delta$

```{r delta}
#| message: false
#| warning: false
#| fig-cap: "delta across sites & plots for genus diversity."
read_tsv("outputs/parameters.tsv") %>%
  filter(parameter == "deltapct", attribute == "diversity_q1_gen") %>%
  unique() %>%
  ggplot(aes(plot)) +
  geom_point(aes(y = median)) +
  geom_segment(aes(y = median - sd, yend = median + sd)) +
  geom_segment(aes(y = q5, yend = q95), size = .1) +
  facet_wrap(~site, scales = "free_y") +
  theme_bw() +
  coord_flip() +
  ylab(expression(delta[Genus] ~ "[ % ]")) +
  xlab("Plot") +
  theme(
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank(),
    panel.spacing = unit(0, "lines")
  )
```

### 15-year bump $y_{15}$

```{r y15_rel}
#| message: false
#| warning: false
#| fig-cap: "15-year bump across sites & plots for genus diversity."
read_tsv("outputs/parameters.tsv") %>%
  filter(parameter == "y15", attribute == "diversity_q1_gen") %>%
  unique() %>%
  ggplot(aes(plot)) +
  geom_point(aes(y = median * 100)) +
  geom_segment(aes(y = (median - sd) * 100, yend = (median + sd) * 100)) +
  geom_segment(aes(y = q5, yend = q95), size = .1) +
  facet_wrap(~site, scales = "free_y") +
  theme_bw() +
  coord_flip() +
  ylab(expression(y[15][Genus] ~ "[ % ]")) +
  xlab("Plot") +
  theme(
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank(),
    panel.spacing = unit(0, "lines")
  )
```
