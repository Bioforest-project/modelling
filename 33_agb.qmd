```{r set}
#| message: false
#| include: false
library(tidyverse)
library(knitr)
library(cmdstanr)
library(bayesplot)
library(loo)
library(patchwork)
list.files("r", full.names = TRUE, pattern = ".R") %>% 
         lapply(source)
```

# AGB {.unnumbered}

Test of modelling with aboveground biomass.

## Data

> We removed Kibale for now.

```{r data}
#| message: false
#| warning: false
var <- "agb"
if (!exists(file.path("chains", var))) {
  dir.create(file.path("chains", var))
}
lab <- expression("AGB [ t" ~ ha^{
  -1
} ~ "]")
data <- read_tsv("data/derived_data/data.tsv") %>%
  filter(variable == var, site != "Kibale") %>%
  unique() %>%
  rename(stem = value) %>%
  select(-env, -env_value, -variable) %>%
  unique() %>%
  filter(!is.infinite(harvest_year_min)) %>%
  mutate(sitenum = as.numeric(as.factor(site)))
data_rec <- data %>%
  filter(treatment == "logged", rel_year > 2) %>%
  mutate(plotnum = as.numeric(as.factor(paste0(site, "_", plot))))
data_old <- data %>%
  filter(treatment == "control") %>%
  mutate(plotoldnum = as.numeric(as.factor(paste0(site, "_", plot))))
data_pre <- data %>% filter(rel_year <= 0)
ind_rec <- data_rec %>%
  select(site, plot, sitenum, plotnum) %>%
  unique() %>%
  arrange(plotnum)
mdata <- list(
  n_rec = nrow(data_rec),
  n_old = nrow(data_old),
  n_pre = nrow(data_pre),
  n_site = max(data_rec$sitenum),
  n_plot_rec = max(data_rec$plotnum),
  stem_rec = data_rec$stem,
  stem_old = data_old$stem,
  stem_pre = data_pre$stem,
  time = data_rec$rel_year - 3,
  site_rec = data_rec$sitenum,
  site_old = data_old$sitenum,
  site_pre = data_pre$sitenum,
  plot_rec = data_rec$plotnum,
  site_plot_rec = ind_rec$sitenum,
  dist_bounds = c(0.1, 1),
  delta_bounds = c(0, 5),
  mu_thetaInf_bounds = c(100, 500),
  thetaInf_s_bounds = c(50, 1000)
)
```

```{r fig}
#| fig-cap: "Modelled trajectories."
ggplot(data, aes(rel_year, stem, group = paste(site, plot), col = treatment)) +
  geom_line() +
  facet_wrap(~site) +
  theme_bw() +
  xlab("") +
  ylab(lab) +
  theme(legend.position = "bottom") +
  scale_color_discrete("")
```

## LTP

```{r ltp_fit}
#| eval: false
ltp <- cmdstan_model("models/ltp.stan")
path <- file.path("chains", var, "ltp")
unlink(path, recursive = TRUE)
dir.create(path)
fit_ltp <- ltp$sample(
  data = mdata,
  chains = 4,
  parallel_chains = 4,
  save_warmup = FALSE,
  output_dir = path
)
```

```{r load_ltp}
#| message: false
#| warning: false
path <- file.path("chains", var, "ltp")
fit_ltp <- as_cmdstan_fit(list.files(path, full.names = TRUE))
data_old <- data_old %>%
  group_by(site) %>%
  mutate(rel_year = max(rel_year + 2))
data_rec$preds <- fit_ltp$summary(c("mu_rec"), median)$median
data_pre$preds <- fit_ltp$summary(c("mu_pre"), median)$median
fit_ltp
```

```{r pvo_ltp}
#| message: false
#| warning: false
#| fig-cap: "Predicted versus observed."
pvo_fig(data_rec, data_pre)
```

```{r preds_ltp}
#| message: false
#| warning: false
#| fig-cap: "Predicted trajectories."
ltp_fig(data_rec, data_pre, data_old, fit_ltp, lab)
```

## STP

```{r stp_fit}
#| eval: false
stp <- cmdstan_model("models/stp.stan")
path <- file.path("chains", var, "stp")
unlink(path, recursive = TRUE)
dir.create(path)
fit_stp <- stp$sample(
  data = mdata,
  chains = 4,
  parallel_chains = 4,
  save_warmup = FALSE,
  output_dir = path
)
```

```{r load_stp}
#| message: false
#| warning: false
path <- file.path("chains", var, "stp")
fit_stp <- as_cmdstan_fit(list.files(path, full.names = TRUE))
data_old <- data_old %>%
  group_by(site) %>%
  mutate(rel_year = max(rel_year + 2))
data_rec$preds <- fit_stp$summary(c("mu_rec"), median)$median
data_pre$preds <- fit_stp$summary(c("mu_pre"), median)$median
fit_stp
```

```{r pvo_stp}
#| message: false
#| warning: false
#| fig-cap: "Predicted versus observed."
pvo_fig(data_rec, data_pre)
```

```{r preds_stp}
#| message: false
#| warning: false
#| fig-cap: "Predicted trajectories."
stp_fig(data_rec, data_pre, data_old, fit_stp, lab)
```

```{r rhat_stp}
t <- fit_stp$summary(
  c(
    "mu_dist", "dist_p", "sigma_dist",
    "mu_lambda", "sigma_lambda", "lambda_p",
    "mu_thetaInf", "sigma_thetaInf", "thetaInf_s",
    "mu_delta", "delta_p", "sigma_delta",
    "mu_tau", "tau_s", "sigma_tau",
    "sigma_old", "sigma_pre", "sigma_rec"
  ),
  "rhat"
) %>%
  filter(rhat > 1.1)
t$variable
```

```{r dist_other_stp}
#| fig-cap: "Posteriors generals pars."
pars <- c(
  "mu_dist", "sigma_dist", "mu_lambda", "sigma_lambda", "mu_thetaInf",
  "sigma_thetaInf", "sigma_old", "sigma_pre", "sigma_rec", "mu_delta",
  "sigma_delta", "mu_tau", "sigma_tau"
)
fit_stp$draws(pars) %>%
  mcmc_dens()
```

```{r rec_time}
#| message: false
#| warning: false
#| fig-cap: "95% recovery time."
fit_stp$summary("lambda_p", "mean") %>%
  mutate(t95 = log(20) / mean) %>%
  ggplot(aes(t95)) +
  geom_histogram() +
  theme_bw() +
  scale_x_log10()
```

## Comparison

```{r loo_compare}
#| warning: false
#| message: false
loo_compare(
  list(
    ltp = fit_ltp$loo(),
    stp = fit_stp$loo()
  )
) %>%
  kable()
```

```{r lambda_comp}
#| fig-cap: "Posteriors generals pars."
fit_ltp$summary("lambda_p", "mean") %>% 
  rename(ltp = mean) %>% 
  left_join(
    fit_stp$summary("lambda_p", "mean") %>% 
      rename(stp = mean)
  ) %>% 
  separate(variable, c("lambda", "p", "plotnum"), convert = T) %>% 
  left_join(ind_rec) %>% 
  ggplot(aes(ltp, stp, col = site)) +
  geom_abline(linetype = "dashed") +
  geom_point() +
  theme_bw() +
  scale_y_log10() +
  scale_x_log10() +
  ggpubr::stat_cor() 
```
